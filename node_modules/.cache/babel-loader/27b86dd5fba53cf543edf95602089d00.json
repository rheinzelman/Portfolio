{"ast":null,"code":"var _jsxFileName = \"/home/ray/Documents/ReactPortfolio/portfolio/src/components/Captcha/Captcha.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\nimport { Button } from '@chakra-ui/core';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CaptchaButton = _ref => {\n  _s();\n\n  let {\n    onVerifyCaptcha\n  } = _ref;\n  const {\n    executeRecaptcha\n  } = useGoogleReCaptcha();\n\n  const clickHandler = async () => {\n    if (!executeRecaptcha) {\n      return;\n    }\n\n    const token = await executeRecaptcha('contact');\n    onVerifyCaptcha(token);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: clickHandler,\n    children: \"Please validate you are a human.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CaptchaButton, \"KC2/BR9GZOeLONPaqIDIprSM/Ts=\", false, function () {\n  return [useGoogleReCaptcha];\n});\n\n_c = CaptchaButton;\nexport const ReCaptcha = _ref2 => {\n  let {\n    onVerifyCaptcha\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(GoogleReCaptchaProvider, {\n    reCaptchaKey: \"<YOUR_KEY>\",\n    children: /*#__PURE__*/_jsxDEV(CaptchaButton, {\n      onVerifyCaptcha: onVerifyCaptcha\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ReCaptcha;\nexport const ContactForm = () => {\n  _s2();\n\n  const {\n    handleSubmit,\n    errors,\n    formState,\n    register,\n    setValue\n  } = useForm({\n    mode: 'onChange'\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const onSubmit = values => {\n    setIsSubmitting(true);\n    console.log(values);\n    setIsSubmitting(false);\n  };\n\n  const onVerifyCaptcha = token => {\n    setValue('captchaToken', token);\n  };\n\n  useEffect(() => {\n    register({\n      name: 'captchaToken'\n    }, {\n      required: true\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(ReCaptcha, {\n      onVerifyCaptcha: onVerifyCaptcha\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      isLoading: isSubmitting,\n      type: \"submit\",\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(ContactForm, \"qsO7MTJ34UVztW/PGNRIGf1HWs4=\", true);\n\n_c3 = ContactForm;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CaptchaButton\");\n$RefreshReg$(_c2, \"ReCaptcha\");\n$RefreshReg$(_c3, \"ContactForm\");","map":{"version":3,"sources":["/home/ray/Documents/ReactPortfolio/portfolio/src/components/Captcha/Captcha.js"],"names":["GoogleReCaptchaProvider","useGoogleReCaptcha","Button","React","CaptchaButton","onVerifyCaptcha","executeRecaptcha","clickHandler","token","ReCaptcha","ContactForm","handleSubmit","errors","formState","register","setValue","useForm","mode","isSubmitting","setIsSubmitting","useState","onSubmit","values","console","log","useEffect","name","required"],"mappings":";;;;AAAA,SACIA,uBADJ,EAEIC,kBAFJ,QAGO,2BAHP;AAIA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAuBL,kBAAkB,EAA/C;;AACA,QAAMM,YAAY,GAAG,YAAY;AAC7B,QAAI,CAACD,gBAAL,EAAuB;AACnB;AACH;;AAED,UAAME,KAAK,GAAG,MAAMF,gBAAgB,CAAC,SAAD,CAApC;AAEAD,IAAAA,eAAe,CAACG,KAAD,CAAf;AACH,GARD;;AAUA,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAjBD;;GAAMH,a;UAC2BH,kB;;;KAD3BG,a;AAmBN,OAAO,MAAMK,SAAS,GAAG;AAAA,MAAC;AAAEJ,IAAAA;AAAF,GAAD;AAAA,sBACrB,QAAC,uBAAD;AACI,IAAA,YAAY,EAAC,YADjB;AAAA,2BAGI,QAAC,aAAD;AAAe,MAAA,eAAe,EAAEA;AAAhC;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,UADqB;AAAA,CAAlB;MAAMI,S;AAQb,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA,QAAnC;AAA6CC,IAAAA;AAA7C,MAA0DC,OAAO,CAAC;AACpEC,IAAAA,IAAI,EAAE;AAD8D,GAAD,CAAvE;AAGA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCC,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMC,QAAQ,GAAIC,MAAD,IAAY;AACzBH,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEAH,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GALD;;AAOA,QAAMd,eAAe,GAAIG,KAAD,IAAW;AAC/BO,IAAAA,QAAQ,CAAC,cAAD,EAAiBP,KAAjB,CAAR;AACH,GAFD;;AAIAiB,EAAAA,SAAS,CAAC,MAAM;AACZX,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAE;AAAR,KAAD,EAA2B;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA3B,CAAR;AACH,GAFQ,CAAT;AAIA,sBACI;AAAM,IAAA,QAAQ,EAAEhB,YAAY,CAACU,QAAD,CAA5B;AAAA,4BACI,QAAC,SAAD;AAAW,MAAA,eAAe,EAAEhB;AAA5B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AACI,MAAA,SAAS,EAAEa,YADf;AAEI,MAAA,IAAI,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAhCM;;IAAMR,W;;MAAAA,W","sourcesContent":["import {\n    GoogleReCaptchaProvider,\n    useGoogleReCaptcha\n} from 'react-google-recaptcha-v3';\nimport { Button } from '@chakra-ui/core';\nimport React from 'react';\n\nconst CaptchaButton = ({ onVerifyCaptcha }) => {\n    const { executeRecaptcha } = useGoogleReCaptcha();\n    const clickHandler = async () => {\n        if (!executeRecaptcha) {\n            return;\n        }\n\n        const token = await executeRecaptcha('contact');\n\n        onVerifyCaptcha(token);\n    };\n\n    return (\n        <Button onClick={clickHandler}>\n            Please validate you are a human.\n        </Button>\n    );\n};\n\nexport const ReCaptcha = ({ onVerifyCaptcha }) => (\n    <GoogleReCaptchaProvider\n        reCaptchaKey=\"<YOUR_KEY>\"\n    >\n        <CaptchaButton onVerifyCaptcha={onVerifyCaptcha} />\n    </GoogleReCaptchaProvider>\n);\n\nexport const ContactForm = () => {\n    const { handleSubmit, errors, formState, register, setValue } = useForm({\n        mode: 'onChange'\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const onSubmit = (values) => {\n        setIsSubmitting(true);\n        console.log(values);\n\n        setIsSubmitting(false);\n    };\n\n    const onVerifyCaptcha = (token) => {\n        setValue('captchaToken', token);\n    };\n\n    useEffect(() => {\n        register({ name: 'captchaToken' }, { required: true });\n    });\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <ReCaptcha onVerifyCaptcha={onVerifyCaptcha} />\n            <button\n                isLoading={isSubmitting}\n                type=\"submit\"\n            >\n                Send Message\n            </button>\n        </form>\n    );\n};"]},"metadata":{},"sourceType":"module"}