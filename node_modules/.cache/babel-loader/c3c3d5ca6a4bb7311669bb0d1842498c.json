{"ast":null,"code":"var _jsxFileName = \"/home/ray/Documents/ReactPortfolio/portfolio/src/components/Contact/Contact.js\",\n    _s = $RefreshSig$();\n\nimport React, { ChangeEvent, FormEvent, useRef, useState } from \"react\";\nimport axios from 'axios';\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport './Contact.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Contact = () => {\n  _s();\n\n  const formID = \"HdX8sO1w\";\n  const formSparkURL = 'https://submit-form.com/' + formID;\n  const recaptchaKey = '6LfO5uYdAAAAAE1H4IQOsavPsVK3o8UWDVLzHoy0';\n  const recaptchaRef = useRef();\n  const initialFormState = {\n    email: '',\n    name: '',\n    message: ''\n  };\n  const [formState, setFormState] = useState(initialFormState); // eslint-disable-next-line no-undef\n\n  const [submitting, setSubmitting] = useState(false);\n  const [message, setMessage] = useState();\n  const [recaptchaToken, setRecaptchaToken] = useState();\n\n  const submitForm = async event => {\n    event.preventDefault();\n    setSubmitting(true);\n    await postSubmission();\n    setSubmitting(false);\n  };\n\n  const postSubmission = async () => {\n    const payload = { ...formState,\n      \"g-recaptcha-response\": recaptchaToken\n    };\n\n    try {\n      const result = await axios.post(formSparkURL, payload);\n      console.log(result);\n      setMessage({\n        class: '',\n        text: \"Thanks, I'll get back to you ASAP\"\n      });\n      setFormState(initialFormState);\n      recaptchaRef.current.reset();\n    } catch (error) {\n      console.log(error);\n      setMessage({\n        class: '',\n        text: \"Sorry, I suck at computers and sending messages is broken...\"\n      });\n    }\n  };\n\n  const updateFormControl = event => {\n    const {\n      id,\n      value\n    } = event.target;\n    const formKey = id;\n    const updatedFormState = { ...formState\n    };\n    updatedFormState[formKey] = value;\n    setFormState(updatedFormState);\n  };\n\n  const updateRecaptchaToken = token => {\n    setRecaptchaToken(token);\n  };\n\n  const onloadCallback = () => {\n    console.log('test');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"contact-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"https://www.google.com/recaptcha/api.js\",\n      async: true,\n      defer: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: '${message.class}',\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitForm,\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formSection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name'\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateFormControl,\n          type: \"text\",\n          id: \"name\",\n          value: formState.name,\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formSection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email'\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateFormControl,\n          type: \"text\",\n          id: \"email\",\n          value: formState.email,\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formSection pb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"message'\",\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"message\",\n          onChange: updateFormControl,\n          value: formState.message,\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReCAPTCHA, {\n        className: \"pb-3\",\n        ref: recaptchaRef,\n        sitekey: recaptchaKey,\n        onChange: updateRecaptchaToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: submitting,\n        className: \"btn btn-primary\",\n        children: submitting ? 'Submitting...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Contact, \"AjUNS7lBcCqbXLoUFRoWZPNRR04=\");\n\n_c = Contact;\nexport default Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/home/ray/Documents/ReactPortfolio/portfolio/src/components/Contact/Contact.js"],"names":["React","ChangeEvent","FormEvent","useRef","useState","axios","ReCAPTCHA","Contact","formID","formSparkURL","recaptchaKey","recaptchaRef","initialFormState","email","name","message","formState","setFormState","submitting","setSubmitting","setMessage","recaptchaToken","setRecaptchaToken","submitForm","event","preventDefault","postSubmission","payload","result","post","console","log","class","text","current","reset","error","updateFormControl","id","value","target","formKey","updatedFormState","updateRecaptchaToken","token","onloadCallback"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, FormEvent, useRef, useState } from \"react\";\nimport axios from 'axios'\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nimport './Contact.css'\n\ntype FormState = {\n    email: string;\n    name: string;\n    message: string;\n}\n\ntype ServiceMessage = {\n    class: string;\n    text: string;\n}\n\nconst Contact = () => {\n\n    const formID = \"HdX8sO1w\";\n    const formSparkURL = 'https://submit-form.com/' + formID\n    const recaptchaKey = '6LfO5uYdAAAAAE1H4IQOsavPsVK3o8UWDVLzHoy0'\n    const recaptchaRef = useRef();\n\n    const initialFormState = {\n        email: '',\n        name: '',\n        message: '',\n    }\n\n    const [formState, setFormState] = useState(initialFormState);\n    // eslint-disable-next-line no-undef\n    const [submitting, setSubmitting] = useState(false);\n    const [message, setMessage] = useState();\n    const [recaptchaToken, setRecaptchaToken] = useState();\n\n    const submitForm = async (event: FormEvent) => {\n        event.preventDefault();\n        setSubmitting(true);\n        await postSubmission();\n        setSubmitting(false);\n    }\n\n    const postSubmission = async () => {\n        const payload = {\n            ...formState,\n            \"g-recaptcha-response\": recaptchaToken,\n        }\n\n        try {\n            const result = await axios.post(formSparkURL, payload);\n            console.log(result)\n            setMessage({\n                class: '',\n                text: \"Thanks, I'll get back to you ASAP\",\n            })\n            setFormState(initialFormState);\n            recaptchaRef.current.reset();\n        } catch(error){\n            console.log(error)\n            setMessage({\n                class: '',\n                text: \"Sorry, I suck at computers and sending messages is broken...\",\n            })\n        }\n    }\n\n    const updateFormControl = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { id, value } = event.target;\n        const formKey = id;\n        const updatedFormState = {...formState};\n        updatedFormState[formKey] = value;\n        setFormState(updatedFormState);\n    }\n\n    const updateRecaptchaToken = (token: string | null) => {\n        setRecaptchaToken(token);\n    }\n\n    const onloadCallback = () => {\n        console.log('test')\n    }\n\n    return (\n\n        <div id=\"contact-div\">\n\n            <script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n\n            {message && <div className={'${message.class}'}>\n                {message.text}\n            </div>}\n\n            <form onSubmit={submitForm} className=\"\">\n\n                <div className=\"formSection\">\n                    <label htmlFor={\"name'\"}>Name</label>\n                    <input onChange={updateFormControl} type={\"text\"} id={\"name\"} value={formState.name} className=\"form-control\" />\n                </div>\n\n                <div className=\"formSection\">\n                    <label htmlFor={\"email'\"}>Email</label>\n                    <input onChange={updateFormControl} type={\"text\"} id={\"email\"} value={formState.email} className=\"form-control\" />\n                </div>\n\n                <div className=\"formSection pb-3\">\n                    <label htmlFor={\"message'\"}>Message</label>\n                    <textarea id={\"message\"} onChange={updateFormControl} value={formState.message} className=\"form-control\" />\n                </div>\n\n                <ReCAPTCHA\n                    className=\"pb-3\"\n                    ref={recaptchaRef}\n                    sitekey={recaptchaKey}\n                    onChange={updateRecaptchaToken}\n                />\n\n                <button disabled={submitting} className={\"btn btn-primary\"}>\n                    {submitting ? 'Submitting...': 'Submit'}\n                </button>\n\n            </form>\n\n        </div>\n\n    );\n};\n\nexport default Contact"]},"metadata":{},"sourceType":"module"}